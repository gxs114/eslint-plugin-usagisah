/** @type {import("eslint").Linter.BaseConfig}*/
module.exports = {
  extends: [require.resolve("./base.js")],
  overrides: [
    {
      files: ["**/*.{ts,tsx,vue}"],
      parser: "@typescript-eslint/parser",
      parserOptions: {
        parser: "@typescript-eslint/parser",
        ecmaVersion: "latest",
        sourceType: "module",
        tsconfigRootDir: process.cwd(),
        project: ["./tsconfig.json"],
        extraFileExtensions: [".vue", ".ts", ".tsx"],
        ecmaFeatures: {
          jsx: true
        }
      },
      plugins: [
        // ts
        "@typescript-eslint"
      ],
      rules: {
        // ts
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "@typescript-eslint/strict-boolean-expressions": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/prefer-for-of": "error",

        // ts 扩展规则，如果不关闭原来的可能会出现误报
        "brace-style": "off",
        "@typescript-eslint/brace-style": ["error", "stroustrup"],
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": ["error", "never"],
        "comma-spacing": "off",
        "@typescript-eslint/comma-spacing": ["error"],
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "off",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "off",
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": ["error"],
        indent: "off",
        "@typescript-eslint/indent": ["error", 2],
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": "off",
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": [
          "error",
          { after: true, before: true }
        ],
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": "error",
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "off",
        "no-dupe-class-members": "off",
        "@typescript-eslint/no-dupe-class-members": ["error"],
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": ["error"],
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": ["off"],
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": ["error"],
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": ["error"],
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "no-invalid-this": "off",
        "@typescript-eslint/no-invalid-this": ["off"],
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": ["error"],
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": ["error"],
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": "off",
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": ["error"],
        "no-restricted-imports": "off",
        "@typescript-eslint/no-restricted-imports": ["off"],
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": ["error"],
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": "off",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": [
          "error",
          {
            allowShortCircuit: true,
            allowTernary: true,
            allowTaggedTemplates: true
          }
        ],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error"],
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["off"],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": ["off"],
        "object-curly-spacing": "off",
        "@typescript-eslint/object-curly-spacing": ["error", "always"],
        "padding-line-between-statements": "off",
        "@typescript-eslint/padding-line-between-statements": "off",
        quotes: "off",
        "@typescript-eslint/quotes": ["error"],
        "require-await": "off",
        "@typescript-eslint/require-await": "off",
        semi: "off",
        "@typescript-eslint/semi": ["error", "never"],
        "space-before-blocks": "off",
        "@typescript-eslint/space-before-blocks": ["error", "always"],
        "space-before-function-paren": "off",
        "@typescript-eslint/space-before-function-paren": ["error"],
        "space-infix-ops": "off",
        "@typescript-eslint/space-infix-ops": ["error", { int32Hint: false }]
      }
    }
  ]
}
